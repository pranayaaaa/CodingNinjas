https://www.naukri.com/code360/guided-paths/data-structures-algorithms/content/651074/offering/10442137?goalRedirection=true&leftPanelTabValue=PROBLEM

import java.util.* ;
import java.io.*; 
public class Deque 
{
    // Initialize your data structure.
    int n;
    int[] arr;
    int front;
    int rear;
    public Deque(int n) 
    {
        // Write your code here.
        this.n=n;
        front=-1;
        rear=-1;
        arr=new int[n];
    }

    // Pushes 'X' in the front of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    public boolean pushFront(int x) 
    {
        // Write your code here.
        if(isFull()){
            return false;
        }
        else if(isEmpty()){
            front=rear=0;
            arr[front]=x;
        }
        else{
            front=(front-1+n)%n;
                arr[front]=x;
            
            
        }
        return true;
    }

    // Pushes 'X' in the back of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    public boolean pushRear(int x) 
    {
        // Write your code here.
        if(isFull()){
            return false;
        }
        else if(isEmpty()){
            front=rear=0;
            arr[rear]=x;
        }
        else{
            rear=(rear+1)%n;
            arr[rear]=x;
            
            
        }
        return true;
    }

    // Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    public int popFront() 
    {
        // Write your code here.
        int temp;
        if(isEmpty()){
            return -1;
        }
        else if(front==rear){
            temp=arr[front];
            front=rear=-1;
        }
        else{
                temp=arr[front];
                front=(front+1)%n;
            
            
        }
        return temp;
    }

    // Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    public int popRear() 
    {
        // Write your code here.
        int temp;
        if(isEmpty()){
            return -1;
        }
        else if(rear==front){
            temp=arr[rear];
            front=rear=-1;
        }
        else{
                temp=arr[rear];
                rear=(rear-1+n)%n;
            
           
        }
         return temp;
    }

    // Returns the first element of the deque. If the deque is empty, it returns -1.
    public int getFront() 
    {
        // Write your code here.
        if(isEmpty()){
            return -1;
        }
        return arr[front];
    }

    // Returns the last element of the deque. If the deque is empty, it returns -1.
    public int getRear() 
    {
        // Write your code here.
        if(isEmpty()){
            return -1;
        }
        return arr[rear];
    }

    // Returns true if the deque is empty. Otherwise returns false.
    public boolean isEmpty() 
    {
        // Write your code here.
        if(front==-1){
            return true;
        }
        return false;
    }

    // Returns true if the deque is full. Otherwise returns false.
    public boolean isFull() 
    {
        // Write your code here.
        if((rear+1)%n==front){
             return true;
        }
        return false;
    }
}
